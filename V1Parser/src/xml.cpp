#line 2 "src/xml.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5



/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
class istream;
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#define FLEX_DEBUG

#include <FlexLexer.h>
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int xmlFlexLexer::yylex()


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 34
#define YY_END_OF_BUFFER 35
static yyconst short int yy_accept[156] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   35,   29,
       29,   29,   34,   34,   34,   28,   28,    3,   34,   34,
       28,   28,   28,   11,   12,   14,   27,   27,   20,   26,
       23,   27,   27,   22,   17,   16,   29,    0,    0,    0,
       29,   33,    0,    0,   18,    0,   18,    0,    0,    0,
        0,    6,    0,   13,    0,    0,    0,    0,   11,   11,
       12,   12,   24,   20,   20,   19,    0,   21,    0,    0,
        0,   22,   22,   17,    0,   31,   30,   31,   29,   29,
       33,   33,    0,    9,    4,    0,   25,   18,   18,    5,

       18,   18,    8,    0,    0,   13,    0,    0,    0,   10,
        0,    0,   19,   21,    0,    0,    0,    0,   15,   31,
       30,   31,   31,    1,    9,    9,    0,   25,   25,    5,
        2,    0,    0,    0,   10,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    2,    0,    0,    0,    0,
        0,    0,    0,    7,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,   12,    9,
        9,    9,    9,    9,   13,   14,   15,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   17,   18,   19,
       20,   21,   22,    1,   23,   24,   25,   26,   24,   24,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   28,   27,   27,   27,   27,   27,   27,
       29,    1,   30,    1,   31,    1,   32,   32,   32,   32,

       32,   32,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   34,
       33,   33,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[35] =
    {   0,
        1,    1,    1,    1,    1,    2,    2,    3,    2,    2,
        4,    2,    2,    2,    2,    5,    6,    2,    7,    2,
        8,    2,    9,    9,    9,    9,   10,   10,    1,   11,
       12,    9,   10,   10
    } ;

static yyconst short int yy_base[182] =
    {   0,
        0,    1,    2,    3,    2,    3,    4,    6,   33,    0,
       67,    0,   95,    0,  113,    0,  345,  342,  366,   92,
      140,  174, 1023,  350,  295, 1023,  311, 1023,  295,    8,
        2,    0,    6,  179,  207, 1023, 1023,  282,  240, 1023,
     1023,    3,   93,  273,    0,  272,   95,    0,    0,  295,
      329,  360,  382,    0,  415,    0,  449,  270,  275,  262,
       87, 1023,  106,  129,  254,  471,  113,  250,  150,  211,
      183,    0, 1023,  290,    0,  244,  149,  277,  247,  131,
      242,  311,    0,    0,  208,  502,  363,  533,  139,    0,
     1023,    0,  212,  566, 1023,  197,  599,  366,    0,  621,

      654,    0, 1023,  204,  181,  419,  202,  661,    0,  431,
      203,  683,  488,  505,  235,  705,  236,  727, 1023, 1023,
     1023, 1023,    0, 1023,  509,    0,  167,  519,    0,    0,
      536,  174,    0,    0,  540,  210,    0,    0,  243,    0,
        0,  267,    0,    0,  147,  550,  151,  144,  143,  131,
      107,   92,    2, 1023, 1023,  761,  773,  785,  797,  809,
      821,  833,  845,  852,  864,  876,  888,  900,  912,  924,
      931,  938,  950,  960,  970,  980,  990,  998, 1003, 1008,
     1013
    } ;

static yyconst short int yy_def[182] =
    {   0,
      156,  156,  157,  157,  158,  158,  159,  159,  155,    9,
      155,   11,   11,   13,   11,   15,  160,  160,  155,  161,
      161,  155,  155,  155,  155,  155,  155,  155,  162,  162,
      163,  164,  165,  155,  155,  155,  155,  155,  155,  155,
      155,  166,  167,  155,  168,  155,  161,  169,  170,  155,
      155,  155,  155,  171,  155,  172,  155,  155,  173,  162,
      162,  155,  163,  155,  174,  155,  165,  175,  155,  155,
      155,   35,  155,  155,   39,  155,  166,  155,  176,  167,
      177,  155,   44,  168,  155,  155,   86,  155,  161,   51,
      155,   52,  155,  155,  155,  155,  155,  155,   55,  155,

      161,   57,  155,  173,  173,  155,  155,  155,   66,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,   88,  155,  155,   94,  155,  155,   97,  100,
      155,  155,  178,  108,  155,  155,  179,  112,  155,  180,
      116,  155,  181,  118,  155,  155,  178,  179,  180,  181,
      155,  155,  155,  155,    0,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155
    } ;

static yyconst short int yy_nxt[1058] =
    {   0,
      155,  155,  155,  155,   23,   23,  155,  155,   64,   78,
       21,   21,   65,   79,   27,   27,   68,   64,   22,   22,
       24,   24,   28,   28,   23,   30,   23,   30,   62,   61,
      154,   25,   25,   26,   26,   23,   26,   26,   26,   31,
       26,   26,   32,   26,   33,   27,   26,   26,   34,   35,
       26,   26,   26,   28,   26,   35,   35,   35,   35,   35,
       35,   36,   26,   35,   35,   35,   35,   37,   37,   23,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   38,   37,   39,   37,   40,   37,   41,   37,   39,
       39,   39,   39,   39,   39,   37,   37,   39,   39,   39,

       39,   42,   48,   81,   78,   48,   43,   62,   61,   37,
       49,   44,   64,   49,  153,   37,   65,   44,   44,   44,
       44,   44,   44,   68,   64,   44,   44,   44,   44,   37,
      106,  106,  106,  106,  152,   37,   37,   37,   37,   37,
       37,   81,   78,   37,   37,   37,   37,   50,   80,   48,
      155,   69,   69,   69,   69,   78,   51,   49,  155,   79,
       77,   67,   52,   52,   52,   52,   52,   52,   63,  151,
       51,   52,   52,   52,   47,   47,   47,   47,   47,   53,
       69,   69,   69,   69,   71,   71,   71,   71,   54,  132,
       55,   63,  145,  131,   70,   56,   55,   55,   55,   55,

       55,   55,   47,   47,   57,   55,   55,   55,   71,   71,
       71,   71,   69,   69,   69,   69,  105,  132,  136,   72,
       72,  127,   72,   72,  124,  136,   70,   67,  119,   72,
       72,   72,   72,   72,   72,  133,  137,   72,   72,   72,
       72,   74,   74,   74,   74,  113,  113,  113,  113,  117,
      139,  142,   75,   75,  115,   75,   75,  111,  139,   76,
       77,  107,   75,   75,   75,   75,   75,   75,  140,  143,
       75,   75,   75,   75,   82,   82,   82,   82,  114,  114,
      114,  114,  142,   61,   80,   83,   83,  105,   83,   83,
      103,   74,   74,   74,   74,   83,   83,   83,   83,   83,

       83,   85,   73,   83,   83,   83,   83,   86,   86,   76,
       87,   88,   82,   82,   82,   82,   61,   88,   88,   88,
       88,   88,   88,   59,   58,   88,   88,   88,   88,   47,
       47,   47,   89,   47,   47,   47,   47,   47,   47,   48,
       47,   90,   90,   47,   90,   90,   89,   49,   47,   47,
       47,   90,   90,   90,   90,   90,   90,   47,   47,   90,
       90,   90,   90,   91,   54,  155,  121,   98,   98,   98,
       98,   46,   92,   92,   46,   92,   92,   91,   87,  155,
      121,  155,   92,   92,   92,   92,   92,   92,  155,  155,
       92,   92,   92,   92,   93,  155,  155,  155,   94,  155,

      155,  155,   95,  155,   94,   94,   94,   94,   94,   94,
       96,  155,   94,   94,   94,   94,   98,   98,   98,   98,
      106,  106,  106,  106,  155,  155,  155,   99,   99,  155,
       99,   99,  135,  135,  135,  135,  155,   99,   99,   99,
       99,   99,   99,  155,  155,   99,   99,   99,   99,   47,
      101,  101,  101,  101,   47,   47,   47,   47,   47,   48,
       47,  102,  102,   47,  102,  102,   47,   49,   47,   47,
       47,  102,  102,  102,  102,  102,  102,   47,   47,  102,
      102,  102,  102,  109,  109,  155,  109,  109,  110,  113,
      113,  113,  113,  109,  109,  109,  109,  109,  109,  155,

      155,  109,  109,  109,  109,  120,  114,  114,  114,  114,
      125,  125,  125,  125,   86,   86,  155,   86,   86,  120,
      128,  128,  128,  128,   86,   86,   86,   86,   86,   86,
      155,  155,   86,   86,   86,   86,  122,  146,  146,  146,
      146,  135,  135,  135,  135,  123,  123,  155,  123,  123,
      122,  146,  146,  146,  146,  123,  123,  123,  123,  123,
      123,  155,  155,  123,  123,  123,  123,  125,  125,  125,
      125,  155,  155,  155,  155,  155,  155,  155,  126,  126,
      155,  126,  126,  155,  155,  155,  155,  155,  126,  126,
      126,  126,  126,  126,  155,  155,  126,  126,  126,  126,

      128,  128,  128,  128,  155,  155,  155,  155,  155,  155,
      155,  129,  129,  155,  129,  129,  155,  155,  155,  155,
      155,  129,  129,  129,  129,  129,  129,  155,  155,  129,
      129,  129,  129,  130,  130,  155,  130,  130,  155,  155,
      155,  155,  155,  130,  130,  130,  130,  130,  130,  155,
      155,  130,  130,  130,  130,  101,  101,  101,  101,  155,
      155,  155,  155,  155,   48,  155,  155,  155,  155,  155,
      155,  155,   49,  134,  134,  155,  134,  134,   63,  155,
      155,  155,  155,  134,  134,  134,  134,  134,  134,  155,
      155,  134,  134,  134,  134,  138,  138,  155,  138,  138,

       67,  155,  155,  155,  155,  138,  138,  138,  138,  138,
      138,  155,  155,  138,  138,  138,  138,  141,  141,  155,
      141,  141,   77,  155,  155,  155,  155,  141,  141,  141,
      141,  141,  141,  155,  155,  141,  141,  141,  141,  144,
      144,  155,  144,  144,   80,  155,  155,  155,  155,  144,
      144,  144,  144,  144,  144,  155,  155,  144,  144,  144,
      144,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   29,   29,   29,

       29,   29,   29,   29,   29,   29,   29,   29,   29,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   60,   60,   60,   60,   60,   60,   60,
      155,   60,   60,   60,   60,   63,   63,   63,   63,   63,
       63,  155,   63,   63,   63,   63,   63,   66,  155,  155,
       66,   66,  155,   66,   67,   67,   67,   67,   67,   67,
      155,   67,   67,   67,   67,   67,   77,   77,   77,   77,
       77,   77,  155,   77,   77,   77,   77,   77,   80,   80,
       80,   80,   80,   80,  155,   80,   80,   80,   80,   80,

       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
      155,   84,   47,   47,  155,  155,   47,   47,  155,   47,
      155,  155,   47,   47,   47,  155,  155,  155,  155,  155,
      155,  155,  155,  155,   47,   47,   97,  155,  155,   97,
       97,  155,   97,  100,  155,  155,  100,  100,  155,  100,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  108,  155,  155,  108,  155,  155,  108,  108,
      155,  108,  112,  155,  155,  112,  155,  155,  112,  112,
      155,  112,  116,  155,  155,  116,  155,  155,  116,  116,
      155,  116,  118,  155,  155,  118,  155,  155,  118,  118,

      155,  118,  147,  155,  155,  155,  147,  148,  155,  155,
      155,  148,  149,  155,  155,  155,  149,  150,  155,  155,
      155,  150,   19,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155
    } ;

static yyconst short int yy_chk[1058] =
    {   0,
        0,    0,    0,    0,    5,    6,    0,    0,   31,   42,
        1,    2,   31,   42,    5,    6,   33,   33,    1,    2,
        3,    4,    5,    6,    7,    7,    8,    8,   30,   30,
      153,    3,    4,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   13,   20,   43,   43,   47,   13,   61,   61,   13,
       20,   13,   63,   47,  152,   13,   63,   13,   13,   13,
       13,   13,   13,   67,   67,   13,   13,   13,   13,   15,
       64,   64,   64,   64,  151,   15,   15,   15,   15,   15,
       15,   80,   80,   15,   15,   15,   15,   21,  150,   89,
       21,   69,   69,   69,   69,   77,   21,   89,   21,   77,
      149,  148,   21,   21,   21,   21,   21,   21,  147,  145,
       21,   21,   21,   21,   22,   22,   22,   22,   22,   22,
       34,   34,   34,   34,   71,   71,   71,   71,   22,  132,
       22,  132,  127,  105,   34,   22,   22,   22,   22,   22,

       22,   22,   22,   22,   22,   22,   22,   22,   35,   35,
       35,   35,   70,   70,   70,   70,  104,  107,  111,   35,
       35,   96,   35,   35,   93,  136,   70,  136,   85,   35,
       35,   35,   35,   35,   35,  107,  111,   35,   35,   35,
       35,   39,   39,   39,   39,   76,   76,   76,   76,   81,
      115,  117,   39,   39,   79,   39,   39,   68,  139,   39,
      139,   65,   39,   39,   39,   39,   39,   39,  115,  117,
       39,   39,   39,   39,   44,   44,   44,   44,   78,   78,
       78,   78,  142,   60,  142,   44,   44,   59,   44,   44,
       58,   74,   74,   74,   74,   44,   44,   44,   44,   44,

       44,   46,   38,   44,   44,   44,   44,   50,   50,   74,
       50,   50,   82,   82,   82,   82,   29,   50,   50,   50,
       50,   50,   50,   27,   25,   50,   50,   50,   50,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   52,   24,   19,   87,   98,   98,   98,
       98,   18,   52,   52,   17,   52,   52,   52,   87,    0,
       87,    0,   52,   52,   52,   52,   52,   52,    0,    0,
       52,   52,   52,   52,   53,    0,    0,    0,   53,    0,

        0,    0,   53,    0,   53,   53,   53,   53,   53,   53,
       53,    0,   53,   53,   53,   53,   55,   55,   55,   55,
      106,  106,  106,  106,    0,    0,    0,   55,   55,    0,
       55,   55,  110,  110,  110,  110,    0,   55,   55,   55,
       55,   55,   55,    0,    0,   55,   55,   55,   55,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   66,   66,    0,   66,   66,   66,  113,
      113,  113,  113,   66,   66,   66,   66,   66,   66,    0,

        0,   66,   66,   66,   66,   86,  114,  114,  114,  114,
      125,  125,  125,  125,   86,   86,    0,   86,   86,   86,
      128,  128,  128,  128,   86,   86,   86,   86,   86,   86,
        0,    0,   86,   86,   86,   86,   88,  131,  131,  131,
      131,  135,  135,  135,  135,   88,   88,    0,   88,   88,
       88,  146,  146,  146,  146,   88,   88,   88,   88,   88,
       88,    0,    0,   88,   88,   88,   88,   94,   94,   94,
       94,    0,    0,    0,    0,    0,    0,    0,   94,   94,
        0,   94,   94,    0,    0,    0,    0,    0,   94,   94,
       94,   94,   94,   94,    0,    0,   94,   94,   94,   94,

       97,   97,   97,   97,    0,    0,    0,    0,    0,    0,
        0,   97,   97,    0,   97,   97,    0,    0,    0,    0,
        0,   97,   97,   97,   97,   97,   97,    0,    0,   97,
       97,   97,   97,  100,  100,    0,  100,  100,    0,    0,
        0,    0,    0,  100,  100,  100,  100,  100,  100,    0,
        0,  100,  100,  100,  100,  101,  101,  101,  101,    0,
        0,    0,    0,    0,  101,    0,    0,    0,    0,    0,
        0,    0,  101,  108,  108,    0,  108,  108,  108,    0,
        0,    0,    0,  108,  108,  108,  108,  108,  108,    0,
        0,  108,  108,  108,  108,  112,  112,    0,  112,  112,

      112,    0,    0,    0,    0,  112,  112,  112,  112,  112,
      112,    0,    0,  112,  112,  112,  112,  116,  116,    0,
      116,  116,  116,    0,    0,    0,    0,  116,  116,  116,
      116,  116,  116,    0,    0,  116,  116,  116,  116,  118,
      118,    0,  118,  118,  118,    0,    0,    0,    0,  118,
      118,  118,  118,  118,  118,    0,    0,  118,  118,  118,
      118,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  159,  159,  159,

      159,  159,  159,  159,  159,  159,  159,  159,  159,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  162,  162,  162,  162,  162,  162,  162,
        0,  162,  162,  162,  162,  163,  163,  163,  163,  163,
      163,    0,  163,  163,  163,  163,  163,  164,    0,    0,
      164,  164,    0,  164,  165,  165,  165,  165,  165,  165,
        0,  165,  165,  165,  165,  165,  166,  166,  166,  166,
      166,  166,    0,  166,  166,  166,  166,  166,  167,  167,
      167,  167,  167,  167,    0,  167,  167,  167,  167,  167,

      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
        0,  168,  169,  169,    0,    0,  169,  169,    0,  169,
        0,    0,  169,  169,  170,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  170,  170,  171,    0,    0,  171,
      171,    0,  171,  172,    0,    0,  172,  172,    0,  172,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  174,    0,    0,  174,    0,    0,  174,  174,
        0,  174,  175,    0,    0,  175,    0,    0,  175,  175,
        0,  175,  176,    0,    0,  176,    0,    0,  176,  176,
        0,  176,  177,    0,    0,  177,    0,    0,  177,  177,

        0,  177,  178,    0,    0,    0,  178,  179,    0,    0,
        0,  179,  180,    0,    0,    0,  180,  181,    0,    0,
        0,  181,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155
    } ;

static yyconst short int yy_rule_linenum[34] =
    {   0,
      110,  114,  128,  133,  143,  153,  165,  176,  186,  197,
      205,  213,  221,  229,  235,  241,  247,  254,  263,  272,
      280,  289,  298,  303,  309,  319,  325,  336,  353,  362,
      370,  377,  386
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "src/xml.lcc"
#define INITIAL 0
/**************************************************
* File: xml.lcc.
* Desc: Implementation of the token parser for the XML subset of SGML.
* Module: AkraLog : Wao.
* Rev: 15 fevrier 2000 : REV 0 : Hugo DesRosiers : Creation.
**************************************************/
#line 13 "src/xml.lcc"

#include <ctype.h>
#include <stdio.h>
#include <iostream.h>
#include "sgmlAnalyzer.h"
#include "xmlLexer.h"

/* 2.2: Characters. */
/* 2.3: Common Syntactic Construct. */
/* For UC, missing CombiningChar, Extender. */
/* R66: */
/* R67: */
/* R68: */
/* R69: */
/* Tokenizing States. */
#define CDATA 1

#define Comment 2

#define ProcInstr 3

#define MarkDef 4

#define Attribute 5

#define AttribValue 6

#define Tag 7

#define DeclSubset 8

#line 670 "src/xml.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 103 "src/xml.lcc"


 /* 2.4: Character Data and Markup.  */
 /* TODO: R14. */

 /* 2.5: Comments. */

#line 805 "src/xml.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = &cin;

		if ( ! yyout )
			yyout = &cout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 156 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1023 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */

		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				cerr << "--scanner backing up\n";
			else if ( yy_act < 34 )
				cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 34 )
				cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 35 )
				cerr << "--(end of buffer or a NUL)\n";
			else
				cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 110 "src/xml.lcc"
{
     BEGIN(Comment);
 }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 114 "src/xml.lcc"
{

#if defined(DEBUG_STEPS)
    if (YYSTATE == MarkDef) {
	cout << "Found markup declaration.\n";
    }
    else {
	cout << "Found comment.\n";
    }
     cout << "[" << yytext << "]\n";
#endif
     analyzer->handle((YYSTATE == MarkDef) ? SgmlAnalyzer::markup : SgmlAnalyzer::comment, yytext + 2);
 }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 128 "src/xml.lcc"
{
    analyzer->handle(SgmlAnalyzer::itemEnd, NULL);
    BEGIN(INITIAL);
 }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 133 "src/xml.lcc"
{

#if defined(DEBUG_STEPS)
     cout << "Empty comment.\n";
#endif
     // Nothing done at analyzer level, just reset the parser data.
 }
	YY_BREAK
/* 2.6: Processing Instructions. */
case 5:
YY_RULE_SETUP
#line 143 "src/xml.lcc"
{

#if defined(DEBUG_STEPS)
     cout << "Found a Proc Instr. name.\n";
     cout << "[" << yytext << "]\n";
#endif
     analyzer->handle(SgmlAnalyzer::procInstrName, yytext + 2);
     BEGIN(ProcInstr);
 }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 153 "src/xml.lcc"
{
     /* TODO: Handle Processing Instruction. */
#if defined(DEBUG_STEPS)
     cout << "end of proc instr.\n";
     cout << "[" << yytext << "]\n";
#endif
     analyzer->handle(SgmlAnalyzer::procInstr, yytext);
     BEGIN(INITIAL);
 }
	YY_BREAK
/* 2.7: CDATA. */
case 7:
YY_RULE_SETUP
#line 165 "src/xml.lcc"
{

#if defined(DEBUG_STEPS)
     cout << "Beginning of CDATA.\n";
     cout << "[" << yytext << "]\n";
#endif
     analyzer->handle(SgmlAnalyzer::cDataStart, yytext);

     BEGIN(CDATA);
 }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 176 "src/xml.lcc"
{

#if defined(DEBUG_STEPS)
     cout << "End of CDATA.\n";
#endif
    analyzer->handle(SgmlAnalyzer::itemEnd, NULL);
     BEGIN(INITIAL);
 }
	YY_BREAK
/* 2.8: Prolog and document type. */
case 9:
YY_RULE_SETUP
#line 186 "src/xml.lcc"
{

#if defined(DEBUG_STEPS)
     cout << "Starting a markup declaration\n";
     cout << "[" << yytext << "]\n";
#endif
     /* The type of markup declaration can be: doctype, element or attlist. */
     analyzer->handle(SgmlAnalyzer::markupStart, yytext + 2);
     BEGIN(MarkDef);
 }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 197 "src/xml.lcc"
{
#if defined(DEBUG_STEPS)
     cout << "Parameter Entity Reference.\n";
     cout << "[" << yytext << "]\n";
#endif
     analyzer->handle(SgmlAnalyzer::per, yytext);
 }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 205 "src/xml.lcc"
{
    // TODO: Handle a number in a markup def.
#if defined(DEBUG_STEPS)
     cout << "Number in markup.\n";
     cout << "[" << yytext << "]\n";
#endif
 }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 213 "src/xml.lcc"
{
    // TODO: Handle a name in a markup def.
#if defined(DEBUG_STEPS)
     cout << "Name in markup.\n";
     cout << "[" << yytext << "]\n";
#endif
 }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 221 "src/xml.lcc"
{
    // TODO: Handle an attribute value in a markup def.
#if defined(DEBUG_STEPS)
     cout << "Literal value in markup.\n";
     cout << "[" << yytext << "]\n";
#endif
 }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 229 "src/xml.lcc"
{
    // TODO: Handle a markup subset start.
    BEGIN(DeclSubset);
 }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 235 "src/xml.lcc"
{
    // TODO: Handle a markup and subset end.
    analyzer->handle(SgmlAnalyzer::itemEnd, NULL);
    BEGIN(INITIAL);
 }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 241 "src/xml.lcc"
{
    // TODO: Handle a markup subset end.
    analyzer->handle(SgmlAnalyzer::itemEnd, NULL);
    BEGIN(MarkDef);
 }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 247 "src/xml.lcc"
{
    /* TODO: Handle a declaration subset data . */
 }
	YY_BREAK
/* 3.Logical structures.. */
/* 3.1 Start tag. */
case 18:
YY_RULE_SETUP
#line 254 "src/xml.lcc"
{
#if defined(DEBUG_STEPS)
     cout << "Start tag.\n";
     cout << "[" << yytext << "]\n";
#endif
     analyzer->handle(SgmlAnalyzer::startTag, yytext+1);
     BEGIN(Attribute);
 }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 263 "src/xml.lcc"
{
#if defined(DEBUG_STEPS)
     cout << "Attribute name assignment.\n";
     cout << "[" << yytext << "]\n";
#endif
     analyzer->handle(SgmlAnalyzer::attribute, yytext);
     BEGIN(AttribValue);
 }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 272 "src/xml.lcc"
{
#if defined(DEBUG_STEPS)
     cout << "Attribute name.\n";
     cout << "[" << yytext << "]\n";
#endif
     analyzer->handle(SgmlAnalyzer::name, yytext);
 }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 280 "src/xml.lcc"
{
#if defined(DEBUG_STEPS)
     cout << "Literal value.\n";
     cout << "[" << yytext << "]\n";
#endif
     analyzer->handle(SgmlAnalyzer::literal, yytext);
     BEGIN(Attribute);
 }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 289 "src/xml.lcc"
{
#if defined(DEBUG_STEPS)
     cout << "Error: encountered non-quoted value in attrib assignment.\n";
     cout << "[" << yytext << "]\n";
#endif
     analyzer->handle(SgmlAnalyzer::nameToken, yytext);
     BEGIN(Attribute);
 }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 298 "src/xml.lcc"
{
    analyzer->handle(SgmlAnalyzer::itemEnd, NULL);
    BEGIN(INITIAL);
 }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 303 "src/xml.lcc"
{
    analyzer->handle(SgmlAnalyzer::fastEndTag, NULL);
    BEGIN(INITIAL);
}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 309 "src/xml.lcc"
{
#if defined(DEBUG_STEPS)
    cout << "Found end tag.\n";
     cout << "[" << yytext << "]\n";
#endif

     analyzer->handle((YYSTATE == CDATA) ? SgmlAnalyzer::cDataEnd : SgmlAnalyzer::endTag, yytext + 1);
     BEGIN(Tag);
 }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 319 "src/xml.lcc"
{
    /* TODO: Transport this error onto the driver analyser. */
    cout << "Error: start tag within a tag.\n";
    BEGIN(INITIAL);
 }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 325 "src/xml.lcc"
{
#if defined(DEBUG_STEPS)
    cout << "Misc data in attr, attrValue, tag.\n";
    cout << "[" << yytext << "]\n";
#endif
    // TODO: Find out who should be handling this case (and when it occurs).
 }
	YY_BREAK
/* Helping rules. */
case 28:
YY_RULE_SETUP
#line 336 "src/xml.lcc"
{
#if defined(DEBUG_STEPS)
    if (YYSTATE == MarkDef) {
	cout << "Misc data in markup decl\n";
    }
    else {
    cout << "Misc data in comment.\n";
    }
    cout << "[" << yytext << "]\n";
#endif
    // TODO: Handle the interns of a markup decl.
 }
	YY_BREAK
/* Miscellanous. */
/* abcd -- data characters */
case 29:
YY_RULE_SETUP
#line 353 "src/xml.lcc"
{
#if defined(DEBUG_STEPS)
    cout << "pcData [" << yytext << "].\n";
#endif
    analyzer->handle(SgmlAnalyzer::pcDataChar, yytext);
 }
	YY_BREAK
/* &#60; -- numeric character reference */
case 30:
YY_RULE_SETUP
#line 362 "src/xml.lcc"
{
#if defined(DEBUG_STEPS)
    cout << "numeric character reference [" << yytext << "].\n";
#endif
    // TODO: Handle this kind of data.
 }
	YY_BREAK
/* &#60xyz. -- syntax error */
case 31:
YY_RULE_SETUP
#line 370 "src/xml.lcc"
{
    cout << "Error: bad char ref [" << yytext <<"].\n";
    // TODO: Handle this kind of data.
 }
	YY_BREAK
/* &#SPACE; -- named character reference. Not supported. */
case 32:
YY_RULE_SETUP
#line 377 "src/xml.lcc"
{
#if defined(DEBUG_STEPS)
    cout << "named character reference [" << yytext << "].\n";
#endif
    // TODO: Handle this kind of data.
 }
	YY_BREAK
/* &amp; -- general entity reference */
case 33:
YY_RULE_SETUP
#line 386 "src/xml.lcc"
{
#if defined(DEBUG_STEPS)
    cout << "general entity reference [" << yytext << "].\n";
#endif
    // TODO: Handle this kind of data.
 }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 394 "src/xml.lcc"
ECHO;
	YY_BREAK
#line 1280 "src/xml.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(CDATA):
case YY_STATE_EOF(Comment):
case YY_STATE_EOF(ProcInstr):
case YY_STATE_EOF(MarkDef):
case YY_STATE_EOF(Attribute):
case YY_STATE_EOF(AttribValue):
case YY_STATE_EOF(Tag):
case YY_STATE_EOF(DeclSubset):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

yyFlexLexer::yyFlexLexer( istream* arg_yyin, ostream* arg_yyout )
	{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

	yy_current_buffer = 0;

#ifdef YY_USES_REJECT
	yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
	yy_state_buf = 0;
#endif
	}

yyFlexLexer::~yyFlexLexer()
	{
	delete yy_state_buf;
	yy_delete_buffer( yy_current_buffer );
	}

void yyFlexLexer::switch_streams( istream* new_in, ostream* new_out )
	{
	if ( new_in )
		{
		yy_delete_buffer( yy_current_buffer );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
		}

	if ( new_out )
		yyout = new_out;
	}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
	{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
	}

void yyFlexLexer::LexerOutput( const char* buf, int size )
	{
	(void) yyout->write( buf, size );
	}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 156 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 156 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 155);

	return yy_is_jam ? 0 : yy_current_state;
	}


void yyFlexLexer::yyunput( int c, register char* yy_bp )
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}


int yyFlexLexer::yyinput()
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


void yyFlexLexer::yyrestart( istream* input_file )
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


void yyFlexLexer::yy_load_buffer_state()
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( istream* file, int size )
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


extern "C" int isatty YY_PROTO(( int ));
void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, istream* file )

	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	b->yy_is_interactive = 0;
	}


void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state( int new_state )
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif


void yyFlexLexer::LexerError( yyconst char msg[] )
	{
	cerr << msg << '\n';
	exit( YY_EXIT_FAILURE );
	}


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 394 "src/xml.lcc"

