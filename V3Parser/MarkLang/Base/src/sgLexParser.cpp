#define yyFlexLexer sgFlexLexer

#line 4 "sgLexParser.cpp"
/* A lexical scanner generated by flex*/

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5



/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <iostream>
using namespace std;

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* Some routines like yy_flex_realloc() are emitted as static but are
   not called by all lexers. This generates warnings in some compilers,
   notably GCC. Arrange to suppress these. */
#ifdef __GNUC__
#define YY_MAY_BE_UNUSED __attribute__((unused))
#else
#define YY_MAY_BE_UNUSED
#endif

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t )) YY_MAY_BE_UNUSED;
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT

#define yywrap() 1
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#define FLEX_DEBUG

#include <FlexLexer.h>
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int xtnSgmlFlexLexer::yylex()


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 38
#define YY_END_OF_BUFFER 39
static yyconst short int yy_acclist[166] =
    {   0,
       39,   15,   38,   15,   38,   15,   38,   15,   38,   16,
       38,   16,   38,   26,   38,   38,   25,   26,   38,   23,
       26,   38,   24,   26,   38,   18,   26,   38,   21,   26,
       38,   26,   38,   21,   26,   38,   19,   21,   26,   38,
       21,   24,   26,   38,   19,   21,   26,   38,   21,   25,
       26,   38,   22,   26,   38,   34,   38,   34,   38,   34,
       38,   34,   38,   34,   38,   29,   34,   38,   32,   34,
       38,   30,   34,   38,   33,   34,   38,   37,   38,   36,
       38,   15,    4,   14,   13,   15,   16,   18,   18,   18,
       17,   21,   21,   21,   20,   21,   21,   21,   20,   21,

       19,   21,   19,   21,   19,   21,   19,   21,   31,   28,
       27,   29,   29,   30,   30,   30,   37,    1,    2,    3,
        4,    4,    4,    8,    7,   10,    6,    5,   12,   13,
       13,   13,   11,   15,   17,   20,   20,   21,   20,   21,
       31,   28,   28,   28,   28,   28,   35,    1,    2,    2,
        1,    2,    2,    3,    3,    3,    9,    7,    7,    7,
       10,    5,    5,    5,    2
    } ;

static yyconst short int yy_accept[138] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    2,    4,    6,
        8,   10,   12,   14,   16,   17,   20,   23,   26,   29,
       32,   34,   37,   41,   45,   49,   53,   56,   58,   60,
       62,   64,   66,   69,   72,   75,   78,   80,   82,   83,
       83,   83,   83,   84,   84,   84,   85,   85,   86,   87,
       88,   88,   89,   90,   91,   92,   93,   94,   95,   95,
       96,   97,   98,   99,   99,  101,  103,  105,  107,  109,
      109,  110,  111,  111,  112,  113,  114,  115,  116,  117,
      118,  118,  120,  121,  122,  123,  124,  124,  125,  126,

      127,  128,  129,  129,  130,  131,  132,  133,  135,  136,
      137,  139,  141,  142,  143,  144,  145,  146,  147,  148,
      150,  151,  153,  154,  155,  156,  157,  158,  159,  160,
      161,  162,  163,  164,  165,  166,  166
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,   12,    9,
        9,    9,    9,    9,   13,   14,   15,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,    9,   17,   18,
       19,   20,   21,    1,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       23,    1,   24,    1,    1,    1,   25,   25,   25,   25,

       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[26] =
    {   0,
        1,    1,    1,    1,    1,    2,    3,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    4,    2,    3,
        2,    2,    1,    5,    2
    } ;

static yyconst short int yy_base[153] =
    {   0,
        0,    1,  114,  113,    2,    3,   23,    0,   48,    0,
       71,   94,   14,   26,  105,  104,  127,   17,  112,  137,
       64,    0,  111,  654,  654,  654,  654,  654,  161,  185,
      118,  189,  208,  232,    0,  236,  654,  654,  114,    8,
      106,  100,  240,  654,  255,  654,    0,   85,   26,   77,
        0,   64,  278,  291,   70,  654,   88,  315,  104,    0,
       54,  339,    0,    0,  357,  361,  365,  369,   98,  373,
      377,  396,    0,   91,  407,  411,  415,    0,    0,   93,
      419,  423,   65,  654,   26,    0,  447,    0,    0,    0,
       16,  450,  473,  654,    0,    0,   19,  654,  497,  521,

      654,  525,   11,  654,  549,    0,    0,   29,    0,    0,
      553,  557,    0,  561,    0,    0,    0,    0,  654,  654,
       95,    0,    0,  654,    0,    0,  654,  565,    0,    0,
        0,  569,    0,    0,  654,  654,  574,  579,  584,  589,
      594,  599,  604,  609,  614,  619,  624,  629,  634,  638,
      643,  648
    } ;

static yyconst short int yy_def[153] =
    {   0,
      137,  137,  138,  138,  139,  139,  139,    7,  136,    9,
      140,  140,  140,  140,  141,  141,  136,  142,  142,  136,
      142,  143,  136,  136,  136,  136,  136,  136,  136,  144,
      145,  146,  144,  144,   33,  144,  136,  136,  147,  136,
      148,  136,  136,  136,  136,  136,  149,  136,  142,   19,
      150,  136,  136,  136,  136,  136,  151,  136,  142,  143,
      136,  136,   29,   29,  136,  144,  136,  144,  145,  136,
      146,  152,   71,  152,  144,  136,  144,   33,   33,  147,
      136,  136,  148,  136,   43,   43,  136,   45,   45,  149,
      136,  136,  136,  136,   53,   53,  136,  136,  136,  136,

      136,  136,  151,  136,  136,   58,   58,  142,   65,   70,
      136,  144,   81,  136,  114,   82,   82,  114,  136,  136,
       92,   92,  121,  136,   93,   93,  136,  136,   99,   99,
      100,  136,  102,  102,  136,    0,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136
    } ;

static yyconst short int yy_nxt[680] =
    {   0,
      136,  136,  136,  136,   25,   25,  136,  136,  136,  136,
       19,   19,  136,  136,  136,  136,   25,   20,   20,   26,
       26,   27,   27,   21,   21,   25,   42,   50,   25,   82,
      104,  127,   82,   44,   51,  119,   50,   28,   42,   50,
       26,  136,   27,   51,   29,   44,   51,   29,   30,   24,
       25,   30,   24,   30,   31,   30,   30,   30,   30,   32,
       33,   33,   34,   35,   30,   36,   30,   37,   30,   35,
       30,   30,   35,   25,   50,  102,   81,   39,  102,   92,
       40,   51,   41,   42,  136,   93,   43,   59,   93,  101,
       44,  102,   45,   46,  102,   45,   25,  135,  136,   81,

       39,  136,   70,   40,   70,   41,   42,  104,   91,   43,
      123,  135,   84,   44,   50,   45,   46,   81,   45,   52,
       81,   51,  136,  108,   70,   61,  136,   48,   48,  136,
       23,   23,  136,   53,  136,  136,   53,   49,   49,   49,
       49,   49,   54,  136,  136,  136,  136,  136,  136,  136,
      136,   55,  136,  136,  136,  136,   56,   57,   58,   49,
       49,   58,   62,   62,   62,   62,  136,  136,  136,  136,
      136,  136,  136,   63,   63,  136,   64,  136,  136,   65,
      136,  136,   64,  136,  136,   64,   67,   67,   68,   67,
       72,   72,   73,   72,  136,   74,  136,  136,  136,  136,

       75,  136,  136,  136,  136,  136,  136,  136,   74,   76,
       76,   77,   76,  136,  136,  136,  136,  136,  136,  136,
       78,   78,  136,   79,  136,  136,  136,  136,  136,   79,
      136,  136,   79,   67,   67,   68,   67,   67,   67,   68,
       67,   85,   85,   85,   85,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,   86,   87,   87,   87,   87,
      136,  136,  136,  136,  136,  136,  136,   88,   88,  136,
       89,  136,  136,  136,  136,  136,   89,  136,  136,   89,
       94,  136,  136,  136,  136,  136,  136,  136,  136,  136,
       95,   95,  136,   96,   94,  136,  136,  136,  136,   96,

      136,  136,   96,   97,  136,  136,  136,  136,  136,  136,
       98,  136,   99,  100,  136,   99,  105,  105,  105,  105,
      136,  136,  136,  136,  136,  136,  136,  106,  106,  136,
      107,  136,  136,  136,  136,  136,  107,  136,  136,  107,
       62,   62,   62,   62,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,   65,  109,  109,
      109,  109,   67,   67,   68,   67,   67,   67,   67,   67,
       67,   67,   68,   67,  110,  110,  110,  110,   72,   72,
       73,   72,  136,   74,  136,  136,  136,  136,   75,  136,
      136,  136,  136,  136,  136,  136,   74,   72,   72,   72,

       72,  136,  136,  136,  136,  136,  136,   70,  111,  111,
      112,  111,   76,   76,   76,   76,   76,   76,   77,   76,
      113,  113,  113,  113,  114,  115,  114,  114,  136,  136,
      136,  136,  136,  136,  136,  116,  116,  136,  117,  118,
      136,  136,  136,  136,  117,  136,  136,  117,   87,   87,
       87,   87,  120,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  121,  121,  136,  122,  120,  136,  136,  136,
      136,  123,  136,  136,  123,  124,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  125,  125,  136,  126,  124,
      136,  136,  136,  136,  126,  136,  136,  126,  128,  128,

      128,  128,  136,  136,  136,  136,  136,  136,  136,  129,
      129,  136,  130,  136,  136,  136,  136,  136,  130,  136,
      136,  130,  131,  131,  131,  131,  132,  132,  132,  132,
      136,  136,  136,  136,  136,  136,  136,  133,  133,  136,
      134,  136,  136,  136,  136,  136,  134,  136,  136,  134,
      105,  105,  105,  105,  111,  111,  111,  111,  111,  111,
      112,  111,  114,  114,  114,  114,  128,  128,  128,  128,
      132,  132,  132,  132,   18,   18,   18,   18,   18,   22,
       22,   22,   22,   22,   24,   24,   24,   24,   24,   38,
       38,   38,   38,   38,   47,   47,   47,   47,   47,   49,

       49,   49,   49,   49,   60,   60,   60,  136,   60,   66,
       66,  136,   66,   66,   69,   69,   69,   69,   69,   71,
       71,   71,   71,   71,   80,   80,   80,   80,   80,   83,
       83,   83,   83,   83,   90,   90,   90,   90,   49,  136,
      136,  136,   49,  103,  103,  103,  103,  103,   74,   74,
       74,   74,   74,   17,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136
    } ;

static yyconst short int yy_chk[680] =
    {   0,
        0,    0,    0,    0,    5,    6,    0,    0,    0,    0,
        1,    2,    0,    0,    0,    0,   13,    1,    2,    5,
        6,    5,    6,    1,    2,    7,   13,   18,   14,   40,
      103,   97,   40,   13,   18,   91,   49,    7,   14,  108,
        7,   85,    7,   49,    7,   14,  108,    7,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,   11,   21,   61,   83,   11,   61,   52,
       11,   21,   11,   11,   50,   52,   11,   21,   52,   55,
       11,   55,   11,   11,   55,   11,   12,  121,   50,   80,

       12,   50,   74,   12,   69,   12,   12,   57,   48,   12,
      121,  121,   42,   12,   59,   12,   12,   41,   12,   19,
       39,   59,   19,   59,   31,   23,   17,   16,   15,   19,
        4,    3,    0,   19,    0,    0,   19,   20,   20,   20,
       20,   20,   20,    0,    0,    0,    0,    0,    0,    0,
        0,   20,    0,    0,    0,    0,   20,   20,   20,   20,
       20,   20,   29,   29,   29,   29,    0,    0,    0,    0,
        0,    0,    0,   29,   29,    0,   29,    0,    0,   29,
        0,    0,   29,    0,    0,   29,   30,   30,   30,   30,
       32,   32,   32,   32,    0,   32,    0,    0,    0,    0,

       32,    0,    0,    0,    0,    0,    0,    0,   32,   33,
       33,   33,   33,    0,    0,    0,    0,    0,    0,    0,
       33,   33,    0,   33,    0,    0,    0,    0,    0,   33,
        0,    0,   33,   34,   34,   34,   34,   36,   36,   36,
       36,   43,   43,   43,   43,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   43,   45,   45,   45,   45,
        0,    0,    0,    0,    0,    0,    0,   45,   45,    0,
       45,    0,    0,    0,    0,    0,   45,    0,    0,   45,
       53,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       53,   53,    0,   53,   53,    0,    0,    0,    0,   53,

        0,    0,   53,   54,    0,    0,    0,    0,    0,    0,
       54,    0,   54,   54,    0,   54,   58,   58,   58,   58,
        0,    0,    0,    0,    0,    0,    0,   58,   58,    0,
       58,    0,    0,    0,    0,    0,   58,    0,    0,   58,
       62,   62,   62,   62,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   62,   65,   65,
       65,   65,   66,   66,   66,   66,   67,   67,   67,   67,
       68,   68,   68,   68,   70,   70,   70,   70,   71,   71,
       71,   71,    0,   71,    0,    0,    0,    0,   71,    0,
        0,    0,    0,    0,    0,    0,   71,   72,   72,   72,

       72,    0,    0,    0,    0,    0,    0,   72,   75,   75,
       75,   75,   76,   76,   76,   76,   77,   77,   77,   77,
       81,   81,   81,   81,   82,   82,   82,   82,    0,    0,
        0,    0,    0,    0,    0,   82,   82,    0,   82,   82,
        0,    0,    0,    0,   82,    0,    0,   82,   87,   87,
       87,   87,   92,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   92,   92,    0,   92,   92,    0,    0,    0,
        0,   92,    0,    0,   92,   93,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   93,   93,    0,   93,   93,
        0,    0,    0,    0,   93,    0,    0,   93,   99,   99,

       99,   99,    0,    0,    0,    0,    0,    0,    0,   99,
       99,    0,   99,    0,    0,    0,    0,    0,   99,    0,
        0,   99,  100,  100,  100,  100,  102,  102,  102,  102,
        0,    0,    0,    0,    0,    0,    0,  102,  102,    0,
      102,    0,    0,    0,    0,    0,  102,    0,    0,  102,
      105,  105,  105,  105,  111,  111,  111,  111,  112,  112,
      112,  112,  114,  114,  114,  114,  128,  128,  128,  128,
      132,  132,  132,  132,  137,  137,  137,  137,  137,  138,
      138,  138,  138,  138,  139,  139,  139,  139,  139,  140,
      140,  140,  140,  140,  141,  141,  141,  141,  141,  142,

      142,  142,  142,  142,  143,  143,  143,    0,  143,  144,
      144,    0,  144,  144,  145,  145,  145,  145,  145,  146,
      146,  146,  146,  146,  147,  147,  147,  147,  147,  148,
      148,  148,  148,  148,  149,  149,  149,  149,  150,    0,
        0,    0,  150,  151,  151,  151,  151,  151,  152,  152,
      152,  152,  152,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136
    } ;

static yyconst short int yy_rule_linenum[38] =
    {   0,
      171,  182,  188,  200,  211,  230,  235,  246,  249,  254,
      259,  262,  265,  277,  280,  290,  310,  321,  331,  342,
      353,  364,  370,  375,  380,  385,  401,  437,  448,  454,
      463,  472,  478,  482,  494,  499,  503
    } ;

#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "sgLexParser.l"
#define INITIAL 0
/**************************************************
* File: sgLexParser.l.
* Desc: Implementation of the token parser for the SGML family of documents.
* Module: AkraLog : Wao.
* Rev: 19 mars 1998 : REV 0 : Hugo DesRosiers : Creation (according to SgmlLex).
* Rev: 2000/08/22 : REV 1: Hugo DesRosiers : Rewrote within Extenta context.
* $Log: sgLexParser.l,v $
* Revision 1.1.1.1  2000/09/20 03:37:34  hugo
* Initial Entry
*
* Revision 1.1.1.2  2000/09/20 03:26:47  hugo
* Initial entry
*
**************************************************/
#line 23 "sgLexParser.l"

#include <ctype.h>
#include <stdio.h>

#include <iostream>

#define LEX_INCLUDE	1
#define DEBUG_LEX

#include "analyzer.h"
#include "sgLexer.h"

/* Figure 1 -- Character Classes: Abstract Syntax */
/* Figure 2 -- Character Classes: Concrete Syntax */
/* LCNMSTRT	[] */
/* UCNMSTRT	[] */
/* @# hmmm. sgml spec says \015 */
/* @# hmmm. sgml spec says \012 */
/* Figure 3 -- Reference Delimiter Set: General */
/* 9.2.1 SGML Character */
/*name_start_character	{LCLetter}|{UCLetter}|{LCNMSTRT}|{UCNMSTRT}*/
/* 9.3 Name */
/* 6.2.1 Space */
/* trailing white space */
/* 9.4.5 Reference End */
/*
 * 10.1.2 Parameter Literal
 * 7.9.3  Attribute Value Literal
 * (we leave recognition of character references and entity references,
 *  and whitespace compression to further processing)
 *
 * @# should split this into minimum literal, parameter literal,
 * @# and attribute value literal.
 */
/* 9.6.1 Recognition modes */
/*
 * Recognition modes are represented here by start conditions.
 * The default start condition, INITIAL, represents the
 * CON recognition mode. This condition is used to detect markup
 * while parsing normal data charcters (mixed content).
 *
 * The CDATA start condition represents the CON recognition
 * mode with the restriction that only end-tags are recognized,
 * as in elements with CDATA declared content.
 * (@# no way to activate it yet: need hook to parser.)
 *
 * The TAG recognition mode is split into two start conditions:
 * ATTR, for recognizing attribute value list sub-tokens in
 * start-tags, and TAG for recognizing the TAGC (">") delimiter
 * in end-tags.
 *
 * The MD start condition is used in markup declarations. The COM
 * start condition is used for comment declarations.
 *
 * The DS condition is an approximation of the declaration subset
 * recognition mode in SGML. As we only use this condition after signalling
 * an error, it is merely a recovery device.
 *
 * The CXT, LIT, PI, and REF recognition modes are not separated out
 * as start conditions, but handled within the rules of other start
 * conditions. The GRP mode is not represented here.
 */
/* %x CON == INITIAL */
#define CDATA 1

#define TAG 2

#define ATTR 3

#define ATTRVAL 4

#define MD 5

#define COM 6

#define DS 7

#line 668 "sgLexParser.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp = NULL, *yy_bp = NULL;
	register int yy_act;

#line 157 "sgLexParser.l"



 /*
  * 9.6 Delimiter Recognition and
  * Figure 3 -- Reference Delimiter Set: General
  *
  * This is organized by recognition mode: first CON, then TAG,
  * MD, and DS. Within a mode, the rules are ordered alphabetically
  * by delimiter name.
  */


  /* &#60; -- numeric character reference */
#line 810 "sgLexParser.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = &std::cin;

		if ( ! yyout )
			yyout = &std::cout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 137 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 654 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */

		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 38 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 38 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 39 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 171 "sgLexParser.l"
{
#if defined(DEBUG_LEX)
    if (analyzer->doLexDebug()) {
      cerr << "@DBG [xtnSgmlFlexer]: numeric character reference [" << yytext << "].\n";
    }
#endif
      // cerr << "@ERR [xtnSgmlFlexer]: Unsupported; numeric character reference [" << yytext << "].\n";
	analyzer->handle(xtnCoreAnalyzer::dataChar, yytext);
    }
	YY_BREAK
/* &#60xyz. -- syntax error */
case 2:
YY_RULE_SETUP
#line 182 "sgLexParser.l"
{
         cerr << "@ERR [xtnSgmlFlexer]: syntax error " << yytext << ".\n";
    }
	YY_BREAK
/* &#SPACE; -- named character reference. Not supported. */
case 3:
YY_RULE_SETUP
#line 188 "sgLexParser.l"
{
#if defined(DEBUG_LEX)
    if (analyzer->doLexDebug()) {
      cerr << "@DBG [xtnSgmlFlexer]: named character reference [" << yytext << "].\n";
    }
#endif
     //  cerr << "@ERR [xtnSgmlFlexer]: Unsupported; named character reference [" << yytext << "].\n";
	analyzer->handle(xtnCoreAnalyzer::dataChar, yytext);
    }
	YY_BREAK
/* &amp; -- general entity reference */
case 4:
YY_RULE_SETUP
#line 200 "sgLexParser.l"
{
#if defined(DEBUG_LEX)
    if (analyzer->doLexDebug()) {
      cerr << "@DBG [xtnSgmlFlexer]: general entity reference [" << yytext << "].\n";
    }
#endif
    // cerr << "@ERR [xtnSgmlFlexer]: Unhandled; general entity reference [" << yytext << "].\n";
	analyzer->handle(xtnCoreAnalyzer::dataChar, yytext);
    }
	YY_BREAK
/* </title> -- end tag */
case 5:
YY_RULE_SETUP
#line 211 "sgLexParser.l"
{
#if defined(DEBUG_LEX)
    if (analyzer->doLexDebug()) {
      cerr << "@DBG [xtnSgmlFlexer]: eng tag [" << yytext << "].\n";
    }
#endif
	analyzer->handle(xtnCoreAnalyzer::endTag, yytext+2);
	BEGIN(TAG);
    }
	YY_BREAK
/* @# HACK for XMP, LISTING?
  Date: Fri, 19 Jan 1996 23:13:43 -0800
  Message-Id: <v01530502ad25cc1a251b@[206.86.76.80]>
  To: www-html@w3.org
  From: chris@walkaboutsoft.com (Chris Lovett)
  Subject: Re: Daniel Connolly's SGML Lex Specification
  */
/* </> -- empty end tag */
case 6:
YY_RULE_SETUP
#line 230 "sgLexParser.l"
{
	cerr << "@ERR [xtnSgmlFlexer]: empty tag !\n";
    }
	YY_BREAK
/* <!DOCTYPE -- markup declaration */
case 7:
YY_RULE_SETUP
#line 235 "sgLexParser.l"
{
#if defined(DEBUG_LEX)
    if (analyzer->doLexDebug()) {
      cerr << "@DBG [xtnSgmlFlexer]: markup declaration [" << yytext << "].\n";
    }
#endif
	analyzer->handle(xtnCoreAnalyzer::markupStart, yytext+2);
	BEGIN(MD);
    }
	YY_BREAK
/* <!> -- empty comment */
case 8:
YY_RULE_SETUP
#line 246 "sgLexParser.l"
{ }
	YY_BREAK
/* <!--  -- comment declaration */
case 9:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 249 "sgLexParser.l"
{
	BEGIN(COM);
    }
	YY_BREAK
/* <![ -- marked section */
case 10:
YY_RULE_SETUP
#line 254 "sgLexParser.l"
{
	BEGIN(DS);
    }
	YY_BREAK
/* ]]> -- marked section end */
case 11:
YY_RULE_SETUP
#line 259 "sgLexParser.l"
{ }
	YY_BREAK
/* <? ...> -- processing instruction */
case 12:
YY_RULE_SETUP
#line 262 "sgLexParser.l"
{ }
	YY_BREAK
/* <name -- start tag */
case 13:
YY_RULE_SETUP
#line 265 "sgLexParser.l"
{
#if defined(DEBUG_LEX)
    if (analyzer->doLexDebug()) {
      cerr << "@DBG [xtnSgmlFlexer]: start tag [" << yytext << "].\n";
    }
#endif
	analyzer->handle(xtnCoreAnalyzer::startTag, yytext+1);
	BEGIN(ATTR);
    }
	YY_BREAK
/* <> -- empty start tag */
case 14:
YY_RULE_SETUP
#line 277 "sgLexParser.l"
{ }
	YY_BREAK
/* abcd -- data characters */
case 15:
YY_RULE_SETUP
#line 280 "sgLexParser.l"
{
#if defined(DEBUG_LEX)
    if (analyzer->doLexDebug()) {
      cerr << "@DBG [xtnSgmlFlexer]: pcData [" << yytext << "].\n";
    }
#endif
	analyzer->handle(xtnCoreAnalyzer::pcDataChar, yytext);
    }
	YY_BREAK
/* abcd -- data characters */
case 16:
YY_RULE_SETUP
#line 290 "sgLexParser.l"
{
#if defined(DEBUG_LEX)
    if (analyzer->doLexDebug()) {
      cerr << "@DBG [xtnSgmlFlexer]: cData [" << yytext << "].\n";
    }
#endif
	analyzer->handle(xtnCoreAnalyzer::dataChar, yytext);
}
	YY_BREAK
/* 7.4 Start Tag */
/* Actually, the generic identifier specification is consumed
  * along with the STAGO delimiter ("<"). So we're only looking
  * for tokens that appear in an attribute specification list,
  * plus TAGC (">"). NET ("/") and STAGO ("<") signal limitations.
  */
/* 7.5 End Tag */
/* Just looking for TAGC. NET, STAGO as above */
/* <a ^href = "xxx"> -- attribute name */
case 17:
YY_RULE_SETUP
#line 310 "sgLexParser.l"
{
#if defined(DEBUG_LEX)
    if (analyzer->doLexDebug()) {
      cerr << "@DBG [xtnSgmlFlexer]: attribute name [" << yytext << "].\n";
    }
#endif
	analyzer->handle(xtnCoreAnalyzer::attribute, yytext);
	BEGIN(ATTRVAL);
    }
	YY_BREAK
/* <img src="xxx" ^ismap> -- name */
case 18:
YY_RULE_SETUP
#line 321 "sgLexParser.l"
{
#if defined(DEBUG_LEX)
    if (analyzer->doLexDebug()) {
      cerr << "@DBG [xtnSgmlFlexer]: name [" << yytext << "].\n";
    }
#endif
	analyzer->handle(xtnCoreAnalyzer::name, yytext);
    }
	YY_BREAK
/* <a name = ^xyz> -- name token */
case 19:
YY_RULE_SETUP
#line 331 "sgLexParser.l"
{
#if defined(DEBUG_LEX)
    if (analyzer->doLexDebug()) {
      cerr << "@DBG [xtnSgmlFlexer]: name token [" << yytext << "].\n";
    }
#endif
	analyzer->handle(xtnCoreAnalyzer::nameToken, yytext);
	BEGIN(ATTR);
    }
	YY_BREAK
/* <a href = ^"a b c"> -- literal */
case 20:
YY_RULE_SETUP
#line 342 "sgLexParser.l"
{
#if defined(DEBUG_LEX)
    if (analyzer->doLexDebug()) {
      cerr << "@DBG [xtnSgmlFlexer]: literal [" << yytext << "].\n";
    }
#endif
	analyzer->handle(xtnCoreAnalyzer::literal, yytext);
	BEGIN(ATTR);
    }
	YY_BREAK
/* <a href = ^http://foo/> -- unquoted literal HACK */
case 21:
YY_RULE_SETUP
#line 353 "sgLexParser.l"
{
#if defined(DEBUG_LEX)
    if (analyzer->doLexDebug()) {
      cerr << "@DBG [xtnSgmlFlexer]: unq literhack [" << yytext << "].\n";
    }
#endif
	analyzer->handle(xtnCoreAnalyzer::unqLiteralHack, yytext);
	BEGIN(ATTR);
    }
	YY_BREAK
/* <a name= ^> -- illegal tag close */
case 22:
YY_RULE_SETUP
#line 364 "sgLexParser.l"
{
	fprintf(stderr, "@ERR [xtnSgmlFlexer]: illegal tag close !\n");
	BEGIN(INITIAL);
    }
	YY_BREAK
/* <a name=foo ^>,</foo^> -- tag close */
case 23:
YY_RULE_SETUP
#line 370 "sgLexParser.l"
{
	BEGIN(INITIAL);
    }
	YY_BREAK
/* <em^/ -- NET tag */
case 24:
YY_RULE_SETUP
#line 375 "sgLexParser.l"
{
	BEGIN(INITIAL);
    }
	YY_BREAK
/* <foo^<bar> -- unclosed start tag */
case 25:
YY_RULE_SETUP
#line 380 "sgLexParser.l"
{
	fprintf(stderr, "@ERR [xtnSgmlFlexer]: unclosed start tag !\n");
	BEGIN(INITIAL);
}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 385 "sgLexParser.l"
{ }
	YY_BREAK
/* 10 Markup Declarations: General */
/* <!^--...-->   -- comment v1:
<MD,COM>{COM}([^-]|-[^-])*{COM}{TAGC}	{
#if defined(DEBUG_LEX)
    if (analyzer->doLexDebug()) {
      cerr << "@DBG [xtnSgmlFlexer]: comment [" << yytext << "].\n";
    }
#endif
	analyzer->handle(xtnCoreAnalyzer::comment, yytext+2);
	BEGIN(INITIAL);
}
*/
case 27:
YY_RULE_SETUP
#line 401 "sgLexParser.l"
{
  int c;
  int mylineno= 0;
  uint bufLength= 1024, curBufUsed= 0;
  char *buffer, *cpyBuffer;

  buffer= new char[bufLength];

  while ((c = yyinput()) != 0) {
    if (curBufUsed == bufLength) {
      cpyBuffer= new char[bufLength + 4096];
      memcpy(cpyBuffer, buffer, bufLength);
      bufLength+= 4096;
      delete[] buffer;
      buffer= cpyBuffer;
    }
    buffer[curBufUsed++]= (char)c;
    if (c == '\n')
       ++mylineno;
    else if (c == '-') {
      if ((c = yyinput()) == '-')
        if ((c = yyinput()) == '>')
          break;
        else
          unput(c);
      else
        unput(c);
    }
  }
  buffer[curBufUsed]= '\0';
  analyzer->handle(xtnCoreAnalyzer::comment, buffer);
  BEGIN(INITIAL);
}
	YY_BREAK
/* <!doctype ^%foo;> -- parameter entity reference */
case 28:
YY_RULE_SETUP
#line 437 "sgLexParser.l"
{
#if defined(DEBUG_LEX)
    if (analyzer->doLexDebug()) {
      cerr << "@DBG [xtnSgmlFlexer]: parameter entity reference [" << yytext << "].\n";
    }
#endif
}
	YY_BREAK
/* The limited set of markup declarations we're interested in
  * use only numbers, names, and literals.
  */
case 29:
YY_RULE_SETUP
#line 448 "sgLexParser.l"
{
#if defined(DEBUG_LEX)
    cerr << "@DBG [xtnSgmlFlexer]: short number [" << yytext << "].\n";
#endif
    }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 454 "sgLexParser.l"
{
#if defined(DEBUG_LEX)
    if (analyzer->doLexDebug()) {
      cerr << "@DBG [xtnSgmlFlexer]: short name [" << yytext << "].\n";
    }
#endif

    }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 463 "sgLexParser.l"
{
#if defined(DEBUG_LEX)
    if (analyzer->doLexDebug()) {
      cerr << "@DBG [xtnSgmlFlexer]: short literal [" << yytext << "].\n";
    }
#endif

    }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 472 "sgLexParser.l"
{
	BEGIN(INITIAL);
    }
	YY_BREAK
/* other constructs are errors. */
/* <!doctype foo ^[  -- declaration subset */
case 33:
YY_RULE_SETUP
#line 478 "sgLexParser.l"
{
	BEGIN(DS);
    }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 482 "sgLexParser.l"
{ }
	YY_BREAK
/* 10.4 Marked Section Declaration */
/* 11.1 Document Type Declaration Subset */
/* Our parsing of declaration subsets is just an error recovery technique:
  * we attempt to skip them, but we may be fooled by "]"s
  * inside comments, etc.
  */
/* ]]> -- marked section end */
case 35:
YY_RULE_SETUP
#line 494 "sgLexParser.l"
{
	BEGIN(INITIAL);
    }
	YY_BREAK
/* ] -- declaration subset close */
case 36:
YY_RULE_SETUP
#line 499 "sgLexParser.l"
{
	BEGIN(COM);
    }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 503 "sgLexParser.l"
{ }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 505 "sgLexParser.l"
ECHO;
	YY_BREAK
#line 1356 "sgLexParser.cpp"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(CDATA):
			case YY_STATE_EOF(TAG):
			case YY_STATE_EOF(ATTR):
			case YY_STATE_EOF(ATTRVAL):
			case YY_STATE_EOF(MD):
			case YY_STATE_EOF(COM):
			case YY_STATE_EOF(DS):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
	{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

	yy_current_buffer = 0;

#ifdef YY_USES_REJECT
	yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
	yy_state_buf = 0;
#endif
	}

yyFlexLexer::~yyFlexLexer()
	{
	delete yy_state_buf;
	yy_delete_buffer( yy_current_buffer );
	}

void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
	{
	if ( new_in )
		{
		yy_delete_buffer( yy_current_buffer );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
		}

	if ( new_out )
		yyout = new_out;
	}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
	{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
	}

void yyFlexLexer::LexerOutput( const char* buf, int size )
	{
	(void) yyout->write( buf, size );
	}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 137 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 137 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 136);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


void yyFlexLexer::yyunput( int c, register char* yy_bp )
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}


int yyFlexLexer::yyinput()
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

	return c;
	}

void yyFlexLexer::yyrestart( std::istream* input_file )
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


void yyFlexLexer::yy_load_buffer_state()
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	b->yy_is_interactive = 0;
	}


void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state( int new_state )
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif


void yyFlexLexer::LexerError( yyconst char msg[] )
	{
	std::cerr << msg << '\n';
	exit( YY_EXIT_FAILURE );
	}


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 505 "sgLexParser.l"

